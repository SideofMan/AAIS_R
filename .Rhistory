if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(tickfont = list(size = 50), range = c(-5.12,5.12)),
yaxis = list(range = c(-5.12,5.12)),
zaxis = list(range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(tickfont = list(size = 10), range = c(-5.12,5.12)),
yaxis = list(range = c(-5.12,5.12)),
zaxis = list(range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(tickfont = list(size = 20), range = c(-5.12,5.12)),
yaxis = list(range = c(-5.12,5.12)),
zaxis = list(range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(font = list(size = 20), tickfont = list(size = 20), range = c(-5.12,5.12)),
yaxis = list(font = list(size = 20), tickfont = list(size = 20), range = c(-5.12,5.12)),
zaxis = list(font = list(size = 20), ttickfont = list(size = 20), range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(font = list(size = 20), tickfont = list(size = 20), range = c(-5.12,5.12)),
yaxis = list(font = list(size = 20), tickfont = list(size = 20), range = c(-5.12,5.12)),
zaxis = list(font = list(size = 20), tickfont = list(size = 20), range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(title = list(font = list(size = 20)), tickfont = list(size = 20), range = c(-5.12,5.12)),
yaxis = list(font = list(size = 20), tickfont = list(size = 20), range = c(-5.12,5.12)),
zaxis = list(font = list(size = 20), tickfont = list(size = 20), range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(title = list(font = list(size = 15)), tickfont = list(size = 15), range = c(-5.12,5.12)),
yaxis = list(font = list(size = 15), tickfont = list(size = 15), range = c(-5.12,5.12)),
zaxis = list(font = list(size = 15), tickfont = list(size = 15), range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(titlefont = list(size = 15), tickfont = list(size = 15), range = c(-5.12,5.12)),
yaxis = list(font = list(size = 15), tickfont = list(size = 15), range = c(-5.12,5.12)),
zaxis = list(font = list(size = 15), tickfont = list(size = 15), range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(titlefont = list(size = 50), tickfont = list(size = 15), range = c(-5.12,5.12)),
yaxis = list(font = list(size = 15), tickfont = list(size = 15), range = c(-5.12,5.12)),
zaxis = list(font = list(size = 15), tickfont = list(size = 15), range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
if(Target_function=='outerproduct'){
#------Outerproduct function plots-------------#
functions=list(function(t) (3/5*dgamma(t+10,2,scale = 3)+2/5*dgamma(10-t,2,scale = 5)),
function(t) (3/4*dsn(t,3,1,5)+1/4*dsn(t,-3,3,-6)),
function(t) dt(t,4),
function(t) (1/2*dbeta(t+3,3,3)+1/2*dnorm(t,0,sqrt(1))),
function(t) (1/2*dexp(t,1)+1/2*dexp(-t,1)),
function(t) dsn(t,0,8,-3),
function(t) (1/8*dnorm(t,-10,sqrt(.1))+1/4*dnorm(t,0,sqrt(.15))+5/8*dnorm(t,7,sqrt(.2))))
myX=X$Values
for(i in 1:7){
x=myX[,i]
p <- ggplot() +
geom_density(aes(x=x, color="Algorithm output"), lwd=1) + # for scale_color_manual, you must define color inside aes only
geom_line(aes(x=x, y=functions[[i]](x), color="Function"), lwd=0.75) +
labs(title = "AAIS algorithm compared to target distribution",
x = "x",
y = "density") +
scale_color_manual(name="",
labels = c("Algorithm output", "Target distribution"),
values = c("red", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
print(p)
}
}else if(Target_function=='Rastrigin'){
#-------------Rastrigin plot---------------#
x=seq(-10, 10, length = 201)
y=seq(-10, 10, length = 201)
grid=expand.grid(x=x,y=y)
Z=with(grid, t_mixture_pdf(cbind(grid$x, grid$y), Proposal$M, Proposal$W, Proposal$Mu, Proposal$Sigma, df))
plot_ly()%>%
add_surface(x = x, y = y, z = matrix(Z, nrow = length(x), ncol = length(y), byrow = TRUE),
alpha = 1, colorscale = "Rainbow") %>%
layout(title = 'Algorithm mixture output') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=0.5),
xaxis = list(titlefont = list(size = 25), tickfont = list(size = 15), range = c(-5.12,5.12)),
yaxis = list(titlefont = list(size = 25), tickfont = list(size = 15), range = c(-5.12,5.12)),
zaxis = list(titlefont = list(size = 25), tickfont = list(size = 15), range = c(0,0.03))))%>%
hide_colorbar()
}else if(Target_function=='helix'){
samps=as.data.frame(X$Values); colnames(samps) <- c("x","y","z")
plot_ly(samps, x=~x, y=~y, z=~z, mode="markers", marker=list(size=2,color="blue",symbol="circle"))%>%
add_markers() %>%
layout(title = 'Helix 3D toy function') %>%
layout(scene = list(aspectmode = "manual", aspectratio = list(x=1,y=1,z=1),
xaxis = list(range = c(-70,70)),
yaxis = list(range = c(-70,70)),
zaxis = list(range = c(0,70))))
}
#--------importance sampling for computing marginal likelihood--------#
MarLik=0
Y = list(); Y$N = 5e5
Y = t_mix_sample(Proposal, Y, df)
Y$Resp=matrix(0,Y$N,Proposal$M) # responsibility of each component with regard to each particle
for(i in 1:Proposal$M){
Y$Resp[,i]=exp(log_t_pdf(Y$Values,Proposal$Mu[i,],drop(Proposal$Sigma[,,i]),df)) # f in eqn 6
}
Y$Proposal=Y$Resp%*%t(Proposal$W) # eqn 6
Y$logProposal=log(Y$Proposal)
output = do.call(Target_function, args=list(Y$Values,data))
Y$logPrior=output[[1]]; Y$logLike=output[[2]] # logs of prior and likelihood, p in the paper
Y$logTarget=Y$logPrior+Y$logLike
Y$logWeight=Y$logTarget-Y$logProposal # log of eqn 8
logWeight_scaled=Y$logWeight-max(Y$logWeight)+10 # scaling the logs of the weights
weight_temp=exp(logWeight_scaled)
Y$NormalizedWeight=weight_temp/sum(weight_temp) # eqn 9
ESS_final=1/sum(Y$NormalizedWeight^2)/Y$N
q=exp(Y$logWeight)
(MarLik=mean(exp(Y$logWeight))) # marginal likelihood of this model
source("C:/Users/jdseidma/Dropbox/Research/SU23/AAIS/GitHub/AAIS_R/Plotting_rastrigin.R", echo=TRUE)
source("C:/Users/jdseidma/Dropbox/Research/SU23/AAIS/GitHub/AAIS_R/Plotting_rastrigin.R", echo=TRUE)
